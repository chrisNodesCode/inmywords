

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  username     String       @unique
  email        String       @unique
  passwordHash String?
  notebooks    Notebook[]   // User → Notebooks
  entries      Entry[]      // Quick access to user-owned entries
  preference   Preference?  // One-to-one user preference
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Preference {
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String @unique
  editorBg      String
  editorWidth   String
}

model Notebook {
  id           String    @id @default(uuid())
  title        String
  description  String?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  groups       Group[]   // Notebook → Groups
  tags         Tag[]     // Metadata tags scoped to this notebook
  user_notebook_tree String[] @default(["Group", "Subgroup", "Entry"])
  precursor     Precursor? @relation(fields: [precursorId], references: [id])
  precursorId   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Precursor {
  id           String    @id @default(uuid())
  title        String
  description  String?
  pattern      Json
  modelData    Json
  notebooks    Notebook[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Group {
  id           String     @id @default(uuid())
  name         String
  description  String?
  user_sort    Int        @default(0)
  notebook     Notebook   @relation(fields: [notebookId], references: [id], onDelete: Cascade)
  notebookId   String
  subgroups    Subgroup[] // Group → Subgroups
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Subgroup {
  id           String     @id @default(uuid())
  name         String
  description  String?
  user_sort    Int        @default(0)
  group        Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId      String
  entries      Entry[]    // Subgroup → Entries
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Entry {
  id           String     @id @default(uuid())
  title        String
  content      String
  user_sort    Int        @default(0)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  subgroup     Subgroup   @relation(fields: [subgroupId], references: [id], onDelete: Cascade)
  subgroupId   String
  tags         Tag[]      @relation("EntryTags") // Metadata tags
  archived     Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Tag {
  id           String     @id @default(uuid())
  name         String
  code         String     @unique
  description  String?
  notebook     Notebook?  @relation(fields: [notebookId], references: [id], onDelete: Cascade)
  notebookId   String?    // Tags scoped to a notebook; null if global
  entries      Entry[]    @relation("EntryTags") // Entries tagged with this metadata
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}