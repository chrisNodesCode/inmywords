generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid()) @db.Uuid
  username     String?    @unique
  email        String      @unique
  passwordHash String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  entries      Entry[]
  preference   Preference?
  notebooks    Notebook[]  @relation("UserNotebooks")
}

model Preference {
  id          String   @id @default(uuid()) @db.Uuid
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique @db.Uuid
  editorBg    String   @default("#FFFFFF")
  editorWidth String   @default("comfortable")
}

model Notebook {
  id          String    @id @default(uuid()) @db.Uuid
  user        User      @relation("UserNotebooks", fields: [userId], references: [id])
  userId      String    @db.Uuid
  title       String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tags        Tag[]
}

model Tag {
  id          String     @id @default(uuid()) @db.Uuid
  name        String
  code        String     @unique
  description String?
  parentId    String?    @db.Uuid
  parent      Tag?       @relation("TagToParent", fields: [parentId], references: [id])
  children    Tag[]      @relation("TagToParent")
  entries     Entry[]    @relation("EntryTags")
  notebookId  String?    @db.Uuid
  notebook    Notebook?  @relation(fields: [notebookId], references: [id])

  @@index([notebookId])
}

model Entry {
  id        String   @id @default(uuid()) @db.Uuid
  title     String
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  tags      Tag[]    @relation("EntryTags")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
